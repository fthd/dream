<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 引入 application.properties -->
    <properties resource="application.properties" />
    <!-- MyBatis3Simple：不生成 Example相关类及方法 -->
    <!-- <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat"> -->
    <context id="Mysql" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
     -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`" />
        <property name="endingDelimiter" value="`" />
        <!-- 指定生成 Mapper 的继承模板 -->
        <!--<plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="${generator.mappers}" />
        </plugin>-->
        <!-- 生成 JavaBean 对象重写 toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
        <!-- 生成 JavaBean 对象继承 Serializable 类 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
        <!-- 生成 JavaBean 对象重写 equals 和 hashCode 方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true" />
        </commentGenerator>
        <!-- jdbc 连接配置 -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}">
        </jdbcConnection>
        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为true时把JDBC DECIMAL和
			NUMERIC类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="true" />
        </javaTypeResolver>
        <!-- 生成JavaBean PO实体 -->
        <javaModelGenerator targetPackage="${generator.javaModel-targetPackage}"
                            targetProject="${generator.targetProject}" />
        <!-- 生成 Mapper XML 配置文件 -->
        <sqlMapGenerator targetPackage="${generator.sqlMap-targetResource}"
                         targetProject="${generator.targetResource}" />
        <!-- 生成Mapper Dao类 -->
        <javaClientGenerator targetPackage="${generator.javaClient-targetPackage}"
                             targetProject="${generator.targetProject}" type="XMLMAPPER" />
        <!-- 不设置Example，Example类用于构造复杂的筛选条件 -->
        <!--<table tableName="tb_user_old"
               enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">
            &lt;!&ndash; 设置驼峰命名法 &ndash;&gt;
            <property name="useActualColumnNames" value="true"/>
        </table>-->
        <table tableName="tb_user_old">
            <!-- 设置驼峰命名法 -->
            <property name="useActualColumnNames" value="true"/>
        </table>
    </context>
</generatorConfiguration>